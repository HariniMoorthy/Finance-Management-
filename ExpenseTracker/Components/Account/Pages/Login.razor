@page "/Account/Login"
@page "/"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using ExpenseTracker.Data
@using ExpenseTracker.Models
@using BlazorToastify
@using Microsoft.Extensions.Logging

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IAntiforgery Antiforgery
@inject IToastService ToastService
@inject ISnackbar Snackbar

<PageTitle>Login</PageTitle>

<MyMudProvider/>

<MudElement HtmlTag="div" Class="ma-0 pa-0" Style="background-color: white;width: 100vw;height: 100vh;overflow: hidden">


    <MudGrid Class="align-center" Style="height: 100%;z-index: 0;">
        <MudItem xs="6">
            <MudStack Row="true" Justify="Justify.Center" Style="width: 100%;margin:auto">
                <MudCard Style="width:800px" Class="ml-10">
                    <MudCardContent>
                        <MudElement>
                            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-2 spaced-text">LOGIN</MudText>
                            <MudText Variant="Variant.H6" Color="Color.Error" Class="mb-4" Align="Align.Center">
                                @errorMessage
                            </MudText>
                            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                                <AntiforgeryToken/>
                                <MudStack  Spacing="4"  >
                                    <MudTextField  @bind-Value=Input.Email Label="Email" Variant="Variant.Outlined" For="() => Input.Email"/>
                                    <MudTextField @bind-Value=Input.Password Label="Password" InputType="InputType.Password" Variant="Variant.Outlined"/>
                                </MudStack>
                                <MudStack Class="mt-8" AlignItems="AlignItems.Center">
                                    <MudButton Style=" margin-bottom:12px; cursor:pointer;" Variant="Variant.Outlined" Color="Color.Info" ButtonType="ButtonType.Submit" Disabled="@_isLoginDisabled">Login</MudButton>
                                    <MudText>Don't have an account yet? <MudLink Href="/Account/Register">Register</MudLink></MudText> 
                                </MudStack>
                            </EditForm>
                        </MudElement>
                    </MudCardContent>
                </MudCard>
            </MudStack>
        </MudItem>
    </MudGrid>
</MudElement>



@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }
    
    private bool _isLoginDisabled = false;

    public async Task LoginUser()
    {
        _isLoginDisabled = true;
        var usr = await UserManager.FindByEmailAsync(Input.Email);
        
        if (usr == null)
        {
            errorMessage = "User not found";
            _isLoginDisabled = false;
            return;
        }
        
        if (await SignInManager.CanSignInAsync(usr))
        {
            var result = await SignInManager.CheckPasswordSignInAsync(usr, Input.Password, true);
            if (result == Microsoft.AspNetCore.Identity.SignInResult.Success)
            {
                Snackbar.Add("Login Successful", Severity.Success);
                Guid key = Guid.NewGuid();
                BlazorCookieLoginMiddleware.Logins[key] = new LoginInfo { Email = Input.Email, Password = Input.Password };
                NavigationManager.NavigateTo($"/login?key={key}", true);
            }
            else
            {
                Console.WriteLine("hii from 2");
                errorMessage = "Login failed. Check your password.";
            }
        }
        else
        {
            errorMessage = "Your account is blocked";
        }

        _isLoginDisabled = false;
        await ToastService.AddToastAsync(
            message: errorMessage,
            type: "error",
            animation: "fade",
            autoClose: 5000
        );
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
        
        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

}
