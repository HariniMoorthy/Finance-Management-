
using Microsoft.Extensions.Options;
using MongoDB.Driver;
using MongoDB.Bson;
using ExpenseTracker.Models;


namespace Finance.Services
{
    public class MongoService
    {
        private readonly IMongoCollection<FinanceData> _mongoCollection;
        private readonly IMongoCollection<ItemCategories> _categories;

        public MongoService(string connectionUri, string dbName, string collectionName)
        {
            var mongoClient = new MongoClient(connectionUri);
            var mongoDatabase = mongoClient.GetDatabase(dbName);

            _mongoCollection = mongoDatabase.GetCollection<FinanceData>(collectionName);
            _categories = mongoDatabase.GetCollection<ItemCategories>(collectionName);
        }
        public async Task<List<FinanceData>> GetAsync() =>
            await _mongoCollection.Find(_ => true).ToListAsync();


        public async Task<List<FinanceData>> GetAsync(string Id) =>
            await _mongoCollection.Find(x => x.Id == Id).ToListAsync();

        public async Task<FinanceData> GetByUserIdAsync(string UserId)
        {
          return await _mongoCollection.Find(x => x.userId == UserId).FirstOrDefaultAsync();
        }

        public async Task deleteTransaction(string transactionId , string UserId)
        {
          Console.WriteLine("Deleting transaction "+UserId+" "+transactionId);
           var financeData = await GetByUserIdAsync(UserId);
           var transaction =  financeData.Transactions.RemoveAll(x => x.Id == transactionId);
           await UpsertByUserIdAsync(UserId, financeData);
        }

        public async Task deleteCategory(string categoryId, string UserId)
        {
            Console.WriteLine("Deleting category " + UserId + " " + categoryId);
            var financeData = await GetByUserIdAsync(UserId);
            var transaction = financeData.Category.RemoveAll(x => x.Id == categoryId);
            await UpsertByUserIdAsync(UserId, financeData);
        }

        public async Task CreateAsync(FinanceData financeData)
        {
            await _mongoCollection.InsertOneAsync(financeData);
        }

        public async Task UpdateByUserIdAsync(string UserId, FinanceData financeData)
        {
            await _mongoCollection.ReplaceOneAsync(x => x.userId == UserId, financeData);
        }

        public async Task UpsertByUserIdAsync(string UserId, FinanceData financeData)
        {
            var filter = Builders<FinanceData>.Filter.Eq(x => x.userId, UserId);
            var options = new ReplaceOptions { IsUpsert = true };

            await _mongoCollection.ReplaceOneAsync(filter, financeData, options);
        }


    }
      
}








































































































































































































































































































































































































































































































































































